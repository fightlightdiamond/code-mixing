import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

import { prisma } from "@/core/prisma";
import { ContentStatus, ProgressStatus, DifficultyLevel } from "@/types/schema";

async function main() {
  console.log("üå± Starting seed...");

  // Create default tenant
  const defaultTenant = await prisma.tenant.create({
    data: {
      name: "Default Tenant",
      plan: "free",
      isActive: true,
    },
  });

  // Create admin user
  const adminUser = await prisma.user.create({
    data: {
      name: "Admin User",
      email: "admin@edtech.com",
      passwordHash: await bcrypt.hash("admin123", 10),
      role: "admin",
      tenant: {
        connect: { id: defaultTenant.id }
      },
      isActive: true,
      preferences: {
        language: "vi",
        theme: "light",
        notifications: true
      }
    },
  });

  // Create coach user
  const coachUser = await prisma.user.create({
    data: {
      name: "Coach Sarah",
      email: "coach@edtech.com",
      passwordHash: await bcrypt.hash("coach123", 10),
      role: "coach",
      tenant: {
        connect: { id: defaultTenant.id }
      },
      isActive: true,
    },
  });

  // Create student users
  const student1 = await prisma.user.create({
    data: {
      name: "Nguy·ªÖn VƒÉn A",
      email: "student1@edtech.com",
      passwordHash: await bcrypt.hash("student123", 10),
      role: "student",
      tenant: {
        connect: { id: defaultTenant.id }
      },
      isActive: true,
    },
  });

  const student2 = await prisma.user.create({
    data: {
      name: "Tr·∫ßn Th·ªã B",
      email: "student2@edtech.com",
      passwordHash: await bcrypt.hash("student123", 10),
      role: "student",
      tenant: {
        connect: { id: defaultTenant.id }
      },
      isActive: true,
    },
  });

  console.log("‚úÖ Users created");

  // Create sample course
  const course1 = await prisma.course.create({
    data: {
      title: "English for IT Professionals",
      level: "intermediate",
      tenantId: defaultTenant.id,
      createdBy: adminUser.id,
      status: "published",
    },
  });

  // Create sample unit
  const unit1 = await prisma.unit.create({
    data: {
      courseId: course1.id,
      title: "Introduction and Basic Communication",
      order: 1,
      tenantId: defaultTenant.id,
    },
  });

  // Create sample lessons
  const lesson1 = await prisma.lesson.create({
    data: {
      unitId: unit1.id,
      courseId: course1.id,
      title: "Gi·ªõi thi·ªáu b·∫£n th√¢n trong c√¥ng vi·ªác IT",
      order: 1,
      tenantId: defaultTenant.id,
      createdBy: adminUser.id,
      status: "published",
    },
  });

  const lesson2 = await prisma.lesson.create({
    data: {
      unitId: unit1.id,
      courseId: course1.id,
      title: "Th·∫£o lu·∫≠n v·ªÅ d·ª± √°n ph·∫ßn m·ªÅm",
      order: 2,
      tenantId: defaultTenant.id,
      createdBy: adminUser.id,
      status: "published",
    },
  });

  console.log("‚úÖ Lessons created");

  // Create sample story with Jewish embedding method
  const story1 = await prisma.story.create({
    data: {
      lessonId: lesson1.id,
      title: "Cu·ªôc ph·ªèng v·∫•n ƒë·∫ßu ti√™n",
      content: `H√¥m nay t√¥i c√≥ m·ªôt interview quan tr·ªçng. T√¥i ƒë√£ prepare r·∫•t k·ªπ l∆∞·ª°ng. 
      Khi v√†o ph√≤ng, interviewer ch√†o t√¥i r·∫•t friendly. H·ªç h·ªèi v·ªÅ experience v√† skills c·ªßa t√¥i. 
      T√¥i explain v·ªÅ c√°c projects ƒë√£ l√†m v√† technical knowledge. 
      Cu·ªëi c√πng, h·ªç n√≥i s·∫Ω contact t√¥i trong v√†i ng√†y t·ªõi.`,
      storyType: "chemdanhtu",
      tenantId: defaultTenant.id,
      createdBy: adminUser.id,
      status: "published",
    },
  });

  // Create story chunks for flexible display
  await prisma.storyChunk.createMany({
    data: [
      {
        storyId: story1.id,
        chunkOrder: 1,
        chunkText: "H√¥m nay t√¥i c√≥ m·ªôt",
        type: "normal",
      },
      {
        storyId: story1.id,
        chunkOrder: 2,
        chunkText: "interview",
        type: "chem",
      },
      {
        storyId: story1.id,
        chunkOrder: 3,
        chunkText: "quan tr·ªçng. T√¥i ƒë√£",
        type: "normal",
      },
      {
        storyId: story1.id,
        chunkOrder: 4,
        chunkText: "prepare",
        type: "chem",
      },
      {
        storyId: story1.id,
        chunkOrder: 5,
        chunkText: "r·∫•t k·ªπ l∆∞·ª°ng.",
        type: "normal",
      },
    ],
  });

  console.log("‚úÖ Stories and chunks created");

  // Create vocabulary
  await prisma.vocabulary.createMany({
    data: [
      {
        lessonId: lesson1.id,
        word: "interview",
        meaning: "ph·ªèng v·∫•n",
        example: "I have a job interview tomorrow.",
        audioUrl: "/audio/vocab/interview.mp3",
      },
      {
        lessonId: lesson1.id,
        word: "experience",
        meaning: "kinh nghi·ªám",
        example: "I have 3 years of experience in software development.",
        audioUrl: "/audio/vocab/experience.mp3",
      },
      {
        lessonId: lesson1.id,
        word: "skills",
        meaning: "k·ªπ nƒÉng",
        example: "My technical skills include React and Node.js.",
        audioUrl: "/audio/vocab/skills.mp3",
      },
      {
        lessonId: lesson2.id,
        word: "deadline",
        meaning: "h·∫°n ch√≥t",
        example: "We need to meet the project deadline.",
        audioUrl: "/audio/vocab/deadline.mp3",
      },
      {
        lessonId: lesson2.id,
        word: "requirements",
        meaning: "y√™u c·∫ßu",
        example: "The client changed the requirements again.",
        audioUrl: "/audio/vocab/requirements.mp3",
      },
    ],
  });

  console.log("‚úÖ Vocabulary created");

  // Create grammar points
  await prisma.grammarPoint.createMany({
    data: [
      {
        lessonId: lesson1.id,
        point: "Present Perfect for Experience",
        explanation:
          'S·ª≠ d·ª•ng Present Perfect ƒë·ªÉ n√≥i v·ªÅ kinh nghi·ªám: "I have worked..." thay v√¨ "I worked..."',
      },
      {
        lessonId: lesson1.id,
        point: "Modal Verbs for Ability",
        explanation:
          'S·ª≠ d·ª•ng "can", "am able to" ƒë·ªÉ n√≥i v·ªÅ kh·∫£ nƒÉng: "I can develop web applications"',
      },
      {
        lessonId: lesson2.id,
        point: "Future Tense for Planning",
        explanation:
          'S·ª≠ d·ª•ng "will", "going to", "plan to" ƒë·ªÉ n√≥i v·ªÅ k·∫ø ho·∫°ch d·ª± √°n',
      },
    ],
  });

  console.log("‚úÖ Grammar points created");

  // Create sample exercise
  const exercise1 = await prisma.exercise.create({
    data: {
      lessonId: lesson1.id,
      type: "cloze",
      difficulty: "medium",
      tenantId: defaultTenant.id,
      createdBy: adminUser.id,
      status: "published",
    },
  });

  // Create sample quiz
  const quiz1 = await prisma.quiz.create({
    data: {
      lessonId: lesson1.id,
      title: "Quiz: Gi·ªõi thi·ªáu b·∫£n th√¢n",
      tenantId: defaultTenant.id,
      createdBy: adminUser.id,
      status: "published",
    },
  });

  // Create questions
  const question1 = await prisma.question.create({
    data: {
      exerciseId: exercise1.id,
      stem: "C√°ch n√†o ƒë√∫ng ƒë·ªÉ n√≥i v·ªÅ kinh nghi·ªám l√†m vi·ªác?",
      type: "MCQ",
      tenantId: defaultTenant.id,
    },
  });

  // Create choices
  await prisma.choice.createMany({
    data: [
      {
        questionId: question1.id,
        text: "I worked as a developer for 3 years.",
        isCorrect: false,
      },
      {
        questionId: question1.id,
        text: "I have worked as a developer for 3 years.",
        isCorrect: true,
      },
      {
        questionId: question1.id,
        text: "I am working as a developer for 3 years.",
        isCorrect: false,
      },
    ],
  });

  console.log("‚úÖ Quiz created");

  // Create sample audio files
  await prisma.audio.createMany({
    data: [
      {
        storyId: story1.id,
        storageKey: "stories/story1_original.mp3",
        voiceType: "original",
        durationSec: 120,
        tenantId: defaultTenant.id,
        createdBy: adminUser.id,
        status: "published",
      },
      {
        lessonId: lesson1.id,
        storageKey: "lessons/lesson1_vocab.mp3",
        voiceType: "vocab",
        durationSec: 60,
        tenantId: defaultTenant.id,
        createdBy: adminUser.id,
        status: "published",
      },
    ],
  });

  console.log("‚úÖ Audio files created");

  // Create sample user progress
  const vocab1 = await prisma.vocabulary.findFirst({
    where: { word: "interview" },
  });

  const vocab2 = await prisma.vocabulary.findFirst({
    where: { word: "experience" },
  });

  if (vocab1 && vocab2) {
    await prisma.userVocabularyProgress.createMany({
      data: [
        {
          userId: student1.id,
          vocabularyId: vocab1.id,
          status: "reviewing",
          lastReviewed: new Date(),
        },
        {
          userId: student1.id,
          vocabularyId: vocab2.id,
          status: "mastered",
          lastReviewed: new Date(),
        },
      ],
    });
  }

  console.log("‚úÖ User progress created");

  // Create sample user results
  await prisma.userResult.create({
    data: {
      userId: student1.id,
      lessonId: lesson1.id,
      score: 85.5,
      startedAt: new Date(),
      finishedAt: new Date(),
    },
  });

  console.log("‚úÖ User results created");

  // Create sample feedback
  await prisma.feedback.create({
    data: {
      userId: student1.id,
      lessonId: lesson1.id,
      content:
        "B√†i h·ªçc r·∫•t hay, ph∆∞∆°ng ph√°p truy·ªán ch√™m gi√∫p t√¥i nh·ªõ t·ª´ v·ª±ng d·ªÖ h∆°n!",
      rate: 5,
    },
  });

  console.log("‚úÖ Feedback created");

  // Create sample reflection
  await prisma.reflection.create({
    data: {
      lessonId: lesson1.id,
      userId: student1.id,
      content: `T√¥i ƒë√£ t·∫°o l·∫°i cu·ªôc h·ªôi tho·∫°i:
      "Good morning! I'm excited to be here for the developer position. 
      I have been working in software development for 3 years, 
      specializing in React and Node.js. I'm passionate about creating 
      user-friendly applications and solving complex problems."`,
    },
  });

  console.log("‚úÖ Reflection created");

  console.log("üéâ Seed completed successfully!");
  console.log("\nüìä Summary:");
  console.log(`- Tenants: ${await prisma.tenant.count()}`);
  console.log(`- Users: ${await prisma.user.count()}`);
  console.log(`- Courses: ${await prisma.course.count()}`);
  console.log(`- Units: ${await prisma.unit.count()}`);
  console.log(`- Lessons: ${await prisma.lesson.count()}`);
  console.log(`- Stories: ${await prisma.story.count()}`);
  console.log(`- Vocabulary: ${await prisma.vocabulary.count()}`);
  console.log(`- Quizzes: ${await prisma.quiz.count()}`);
}

main()
  .catch((e) => {
    console.error("‚ùå Seed failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
